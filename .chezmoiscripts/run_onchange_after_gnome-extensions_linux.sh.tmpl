#!/bin/bash
# Manages GNOME extensions via gnome-extensions and extensions.gnome.org API
# Extensions list hash: {{ .gnome.extensions.enabled | toJson | sha256sum }}

set -euo pipefail

# Only run if GNOME Shell is installed
if ! command -v gnome-shell &>/dev/null; then
  echo "GNOME Shell not found, skipping extension management"
  exit 0
fi

# Check for gnome-extensions
if ! command -v gnome-extensions &>/dev/null; then
  echo "ERROR: gnome-extensions command not found"
  echo "Please install gnome-extensions-app package"
  exit 1
fi

echo "Managing GNOME extensions..."

# Get GNOME Shell version
SHELL_VERSION=$(gnome-shell --version | cut -d' ' -f3 | cut -d'.' -f1)

# Function to download and install an extension
install_extension() {
  local uuid="$1"
  local tmpdir

  echo "  Downloading $uuid..."

  # Fetch extension info from API
  local info
  info=$(curl -sS "https://extensions.gnome.org/extension-info/?uuid=$uuid&shell_version=$SHELL_VERSION" 2>/dev/null || echo "")

  if [[ -z "$info" ]]; then
    echo "    ERROR: Failed to fetch extension info for $uuid"
    return 1
  fi

  # Check if extension exists for this shell version
  local download_url
  download_url=$(echo "$info" | jq -r '.download_url // empty')

  if [[ -z "$download_url" ]]; then
    echo "    ERROR: Extension $uuid not available for GNOME Shell $SHELL_VERSION"
    return 1
  fi

  # Download extension
  tmpdir=$(mktemp -d)
  if ! curl -sS -L -o "$tmpdir/extension.zip" "https://extensions.gnome.org$download_url" 2>/dev/null; then
    echo "    ERROR: Failed to download $uuid"
    rm -rf "$tmpdir"
    return 1
  fi

  # Install extension
  if gnome-extensions install --force "$tmpdir/extension.zip" &>/dev/null; then
    echo "  Installed $uuid"
  else
    echo "    ERROR: Failed to install $uuid"
    rm -rf "$tmpdir"
    return 1
  fi

  rm -rf "$tmpdir"
  return 0
}

# Get list of currently installed user extensions
INSTALLED=$(gnome-extensions list --user 2>/dev/null || echo "")

# Get list of currently enabled extensions
ENABLED=$(gnome-extensions list --enabled 2>/dev/null || echo "")

# Install and enable desired extensions
{{ if .gnome.extensions.enabled -}}
{{ range .gnome.extensions.enabled -}}
# Check if already installed
if ! grep -q "{{ . }}" <<<"$INSTALLED"; then
  install_extension "{{ . }}"
fi
# Check if already enabled
if ! grep -q "{{ . }}" <<<"$ENABLED"; then
  echo "  Enabling {{ . }}..."
  gnome-extensions enable "{{ . }}" &>/dev/null || true
fi
{{ end -}}
{{ end }}

# Uninstall extensions not in our list
{{ if .gnome.extensions.enabled -}}
DESIRED_EXTENSIONS=({{ range .gnome.extensions.enabled }}"{{ . }}" {{ end }})
{{ else -}}
DESIRED_EXTENSIONS=()
{{ end -}}

while IFS= read -r ext; do
  [[ -z "$ext" ]] && continue

  # Check if extension is in our desired list
  FOUND=0
  for desired in "${DESIRED_EXTENSIONS[@]}"; do
    if [[ "$ext" == "$desired" ]]; then
      FOUND=1
      break
    fi
  done

  # If not in desired list, uninstall it
  if [[ $FOUND -eq 0 ]]; then
    echo "  Removing unmanaged extension: $ext"
    gnome-extensions uninstall "$ext" &>/dev/null || true
  fi
done <<<"$INSTALLED"

echo "âœ“ GNOME extensions managed"
